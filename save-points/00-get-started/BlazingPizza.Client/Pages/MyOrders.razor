@page "/myorders"

@inject OrdersClient OrdersClient
@implements IDisposable

<PageTitle>Blazing Pizza - My Orders</PageTitle>

<div class="main">
    <TemplatedList Loader="@LoadOrders" ListGroupClass="orders-list">
        <Loading>Loading...</Loading>
        <Empty>
            <h2>No orders placed</h2>
            <a class="btn btn-success" href="">Order some pizza</a>
        </Empty>
        <Item Context="item">
            <div class="col">
                <h5>@item.Order.CreatedTime.ToLongDateString()</h5>
                Items:
                <strong>@item.Order.Pizzas.Count()</strong>;
                Total price:
                <strong>£@item.Order.GetFormattedTotalPrice()</strong>
            </div>
            <div class="col">
                Status: <strong>@item.StatusText</strong>
            </div>
            <div class="col flex-grow-0">
                <a href="myorders/@item.Order.OrderId" class="btn btn-success">
                    Track &gt;
                </a>
            </div>
        </Item>
    </TemplatedList>

    
</div>

@code {
    CancellationTokenSource pollingCancellationToken;
    IEnumerable<OrderWithStatus> orderWithStatus = Enumerable.Empty<OrderWithStatus>();

    async Task<IEnumerable<OrderWithStatus>> LoadOrders()
    {
        return orderWithStatus;
    }

    protected override async Task OnParametersSetAsync()
    {
        pollingCancellationToken?.Cancel();
        PollForUpdates();
    }

    void IDisposable.Dispose()
    {
        pollingCancellationToken?.Cancel();
    }

    private async void PollForUpdates()
    {
        try
        {
            pollingCancellationToken = new CancellationTokenSource();
            while (!pollingCancellationToken.IsCancellationRequested)
            {
                orderWithStatus = await OrdersClient.GetOrders();
                StateHasChanged();
                var OpenOrders = false;
                foreach (OrderWithStatus thisOrder in orderWithStatus)
                {
                    if (!thisOrder.IsDelivered)
                    {
                        OpenOrders = true;
                        break;
                    }
                }

                if (!OpenOrders)
                {
                    pollingCancellationToken.Cancel();
                }
                else
                {
                    await Task.Delay(1000);
                }
            }
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        catch (Exception ex)
        {
            pollingCancellationToken.Cancel();
            Console.Error.WriteLine(ex);
            StateHasChanged();
        }
    }
}
