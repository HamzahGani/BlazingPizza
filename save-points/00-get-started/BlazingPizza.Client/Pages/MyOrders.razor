@page "/myorders"
@inject HttpClient HttpClient
@implements IDisposable

<PageTitle>Blazing Pizza - My Orders</PageTitle>

<div class="main">
    @if(orderWithStatus == null)
    {
        <text>Loading...</text>
    }
    else if (!orderWithStatus.Any())
    {
        <h2>No orders placed</h2>
        <a class="btn btn-success" href="">Order some pizza</a>
    }
    else 
    {
        <div class="list-group orders-list">
            @foreach (var item in orderWithStatus)
            {
                <div class="list-group-item">
                    <div class="col">
                        <h5>@item.Order.CreatedTime.ToLongDateString()</h5>
                        Items:
                        <strong>@item.Order.Pizzas.Count()</strong>;
                        Total price:
                        <strong>$@item.Order.GetFormattedTotalPrice()</strong>
                    </div>
                    <div class="col">Status: <strong>@item.StatusText</strong></div>
                    <div class="col flex-grow-0">
                        <a href="myOrders/@item.Order.OrderId" class="btn btn-success">Track &gt;</a>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    IEnumerable<OrderWithStatus> orderWithStatus;

    bool invalidOrder;
    CancellationTokenSource pollingCancellationToken;


    protected override async Task OnParametersSetAsync()
    {
        //orderWithStatus = await HttpClient.GetFromJsonAsync<List<OrderWithStatus>>("orders");
        pollingCancellationToken?.Cancel();
        PollForUpdates();
    }

    private async void PollForUpdates()
    {
        pollingCancellationToken = new CancellationTokenSource();
        while (!pollingCancellationToken.IsCancellationRequested)
        {
            try
            {
                invalidOrder = false;
                orderWithStatus = await HttpClient.GetFromJsonAsync<List<OrderWithStatus>>($"orders");
                StateHasChanged();

                var OpenOrders = false;

                foreach (OrderWithStatus thisOrder in orderWithStatus)
                {
                    if (!thisOrder.IsDelivered)
                    {
                        OpenOrders = true;
                        break;
                    }
                }

                if (!OpenOrders)
                {
                    pollingCancellationToken.Cancel();
                }
                else
                {
                    await Task.Delay(1000);
                }
            }
            catch (Exception ex)
            {
                invalidOrder = true;
                pollingCancellationToken.Cancel();
                Console.Error.WriteLine(ex);
                StateHasChanged();
            }
        }
    }

    void IDisposable.Dispose()
    {
        pollingCancellationToken?.Cancel();
    }
}
