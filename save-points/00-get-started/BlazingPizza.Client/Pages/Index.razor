@page "/"
@inject HttpClient HttpClient
@inject OrderState OrderState
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<div class="main">
    <h1>Blazing Pizzas</h1>
    <br />
    <ul class="pizza-cards">
        @if(specials != null) 
        {
            @foreach (var special in specials)
            {
                <li @onclick="@(() => OrderState.ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                        @special.Description
                        <span class="price">@special.GetFormattedBasePrice()</span>
                    </div>
                </li>
            }
        }
    </ul>
</div>

<div class="sidebar">
    @if(order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your Order</h2>
            @foreach(var configuredPizza in order.Pizzas)
            {
                <ConfiguredPizzaItem 
                    Pizza="configuredPizza" 
                    OnRemoved="@(() => RemovePizza(configuredPizza))" />
            }
        </div>
    }
    else 
    {
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

    <div class="order-total @(order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@order.GetFormattedTotalPrice()</span>
        <a href="checkout" class="@(OrderState.Order.Pizzas.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
            Order >
        </a>
        @*
        <button class="btn btn-warning" disabled="@(order.Pizzas.Count==0)" @onclick="PlaceOrder">Order </button>*@
    </div>
</div>

<TemplatedDialog Show="OrderState.ShowingConfigureDialog">
    @*<ChildContent>*@
        <ConfigurePizzaDialog Pizza="OrderState.ConfiguringPizza"
            OnCancel="OrderState.CancelConfigurePizzaDialog"
            OnConfirm="OrderState.ConfirmConfigurePizzaDialog" />
    @*</ChildContent>*@
</TemplatedDialog>

@code {
    List<PizzaSpecial> specials;
    Order order = new Order();

    async Task RemovePizza(Pizza configuredPizza)
    {
        if (await JS.Confirm($"Remove {configuredPizza.Special.Name} pizza from the order?"))
        {
            OrderState.RemoveConfiguredPizza(configuredPizza);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>("specials",
            BlazingPizza.OrderContext.Default.ListPizzaSpecial);

        order = OrderState.Order;
    }

    
}