@page "/checkout"

@inject OrdersClient OrdersClient
@inject OrderState OrderState
@inject NavigationManager NavigationManager
@attribute [Authorize]
@inject IJSRuntime JSRuntime

<PageTitle>Blazing Pizza - Checkout</PageTitle>
<div class="main">
    <EditForm Model="OrderState.Order.DeliveryAddress" OnValidSubmit="PlaceOrder">
        <div class="checkout-cols">
            <div class="checkout-order-details">
                <h4>Review order</h4>
                <OrderReview Order="OrderState.Order" />
            </div>

            <div class="checkout-delivery-address">
                <h4>Deliver to...</h4>
                <AddressEditor Address="OrderState.Order.DeliveryAddress" />
            </div>
        </div>
    
        <button class="checkout-button btn btn-warning" type="submit">Place order</button>

        <DataAnnotationsValidator />
    </EditForm>
</div>

@code {
    public bool isSubmitting = false;

    protected override void OnInitialized()
    {
        // In the background, ask if they want to be notified about order updates
        _ = RequestNotificationSubscriptionAsync();
    }

    async Task RequestNotificationSubscriptionAsync()
    {
        var subscription = await JSRuntime.InvokeAsync<NotificationSubscription>("blazorPushNotifications.requestSubscription");
        if (subscription != null)
        {
            try
            {
                await OrdersClient.SubscribeToNotifications(subscription);
            }
            catch (AccessTokenNotAvailableException ex)
            {
                ex.Redirect();
            }
        }
    }

    async Task PlaceOrder()
    {
        try
        {
            if (isSubmitting) return;
            isSubmitting = true;

            var newOrderId = await OrdersClient.PlaceOrder(OrderState.Order);
        
            isSubmitting = false;
            OrderState.ResetOrder();
            NavigationManager.NavigateTo($"myorders/{newOrderId}");
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        
    }
}
